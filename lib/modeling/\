from functools import wraps
import importlib
import logging

import torch
import torch.nn as nn
import torch.nn.functional as F
from torch.autograd import Variable

from core.config import cfg
from model.roi_pooling.functions.roi_pool import RoIPoolFunction
from model.roi_crop.functions.roi_crop import RoICropFunction
from modeling.roi_xfrom.roi_align.functions.roi_align import RoIAlignFunction
import modeling.rpn_heads as rpn_heads
import modeling.fast_rcnn_heads as fast_rcnn_heads
import modeling.mask_rcnn_heads as mask_rcnn_heads
import modeling.keypoint_rcnn_heads as keypoint_rcnn_heads
import modeling.dispSeg_heads as semseg_heads
import utils.blob as blob_utils
import utils.net as net_utils
import utils.resnet_weights_helper as resnet_utils
from lib.nn import SynchronizedBatchNorm2d
import pynvml
import cv2
logger = logging.getLogger(__name__)

pynvml.nvmlInit()
handle = pynvml.nvmlDeviceGetHandleByIndex(0)
meminfo = pynvml.nvmlDeviceGetMemoryInfo(handle)
def get_func(func_name):
    """Helper to return a function object by name. func_name must identify a
    function in this module or the path to a function relative to the base
    'modeling' module.
    """
    if func_name == '':
        return None
    try:
        parts = func_name.split('.')
        # Refers to a function in this module
        if len(parts) == 1:
            return globals()[parts[0]]
        # Otherwise, assume we're referencing a module under modeling
        module_name = 'modeling.' + '.'.join(parts[:-1])
        module = importlib.import_module(module_name)
        return getattr(module, parts[-1])
    except Exception:
        logger.error('Failed to find function: %s', func_name)
        raise


def compare_state_dict(sa, sb):
    if sa.keys() != sb.keys():
        return False
    for k, va in sa.items():
        if not torch.equal(va, sb[k]):
            return False
    return True


def check_inference(net_func):
    @wraps(net_func)
    def wrapper(self, *args, **kwargs):
        if not self.training:
            if cfg.PYTORCH_VERSION_LESS_THAN_040:
                return net_func(self, *args, **kwargs)
            else:
                with torch.no_grad():
                    return net_func(self, *args, **kwargs)
        else:
            raise ValueError('You should call this function only on inference.'
                              'Set the network in inference mode by net.eval().')

    return wrapper


class SegmentationModuleBase(nn.Module):
    def __init__(self):
        super(SegmentationModuleBase, self).__init__()

    def pixel_acc(self, pred, label):
        _, preds = torch.max(pred, dim=1)
        valid = (label != 255).long()
        acc_sum = torch.sum(valid*(preds == label).long())
        pixel_sum = torch.sum(valid)
        acc = acc_sum.float() / (pixel_sum.float() + 1e-10)
        return acc


class Generalized_SEGDISP(SegmentationModuleBase):
    def __init__(self):
        super(SegmentationModuleBase, self).__init__()

        # For cache
        self.mapping_to_detectron = None
        self.orphans_in_detectron = None

        #define encoder 
        #self.encoder = get_func(cfg.MODEL.CONV_BODY)()
        builder = semseg_heads.ModelBuilder()
        self.encoder = builder.build_encoder(
            arch=cfg.SEM.ARCH_ENCODER,
            fc_dim=cfg.SEM.FC_DIM)
        #weights=cfg.RESNETS.IMAGENET_PRETRAINED_WEIGHTS)

        #define shape weights
        self.decoder = builder.build_decoder(
                arch=cfg.SEM.DECODER_TYPE,
                fc_dim=cfg.SEM.FC_DIM,
                num_class=cfg.MODEL.NUM_CLASSES,
                use_softmax=not self.training,
                weights='')

        ##define semseg loss
        self.conv_last_semseg = nn.Sequential(
            nn.Conv2d(512, cfg.SEM.DIM,
                      kernel_size=3, padding=1, bias=False),
            SynchronizedBatchNorm2d(cfg.SEM.DIM),
            nn.ReLU(inplace=True),
            nn.Dropout2d(0.1),
            nn.Conv2d(cfg.SEM.DIM, cfg.MODEL.NUM_CLASSES, kernel_size=1)
        )
        self.conv_last_semseg.apply(self._init_weights_kaiming)
        self.crit = nn.NLLLoss(ignore_index=255)
        self.deep_sup_scale = cfg.SEM.DEEP_SUB_SCALE
        if len(cfg.SEM.DOWNSAMPLE) > 1:
            self.semseg_deepsup=nn.Sequential(
                nn.Conv2d(cfg.SEM.FC_DIM // 4, 512, kernel_size=3, stride=1, padding=1, bias=None),
                SynchronizedBatchNorm2d(512),
                nn.ReLU(inplace=True),
                nn.Dropout2d(0.1),
                nn.Conv2d(cfg.SEM.DIM, cfg.MODEL.NUM_CLASSES, kernel_size=1)
            )
            self.semseg_deepsup.apply(self._init_weights_kaiming)
        
        #define disp loss
        self.conv_last_disp = nn.Sequential(
            nn.Conv2d(512, cfg.DISP.DIM,
                      kernel_size=3, padding=1, bias=False),
            SynchronizedBatchNorm2d(cfg.SEM.DIM),
            nn.ReLU(inplace=True),
            nn.Dropout2d(0.1),
            nn.Conv2d(cfg.DISP.DIM, 1, kernel_size=1)
        )
        handle = pynvml.nvmlDeviceGetHandleByIndex(0)
        meminfo= pynvml.nvmlDeviceGetMemoryInfo(handle)
        print("GPU MEMORIES UESD:{} MB(AFTER BACKWARD)".format(meminfo.used/1024**2))
        print("GPU MEMORIES FREE:{} MB(AFTER BACKWARD)\n".format(meminfo.free/1024**2))
        self.conv_last_disp.apply(self._init_weights_normal)        
        #self.disp_loss = nn.SmoothL1Loss(reduction='elementwise_mean')
        #self.disp_loss = self._disp_loss
        if len(cfg.SEM.DOWNSAMPLE) > 1:
            self.disp_deepsup=nn.Sequential(
                nn.Conv2d(cfg.SEM.FC_DIM // 4, 512, kernel_size=3, stride=1, padding=1, bias=None),
                SynchronizedBatchNorm2d(512),
                nn.ReLU(inplace=True),
                nn.Dropout2d(0.1),
                nn.Conv2d(cfg.DISP.DIM, 1, kernel_size=1)
            )
            self.conv_disp_deepsup.apply(self._init__weights_normal)
        print("weight initialize success")


    def disp_loss(self, pred, targe, sparse=False):
        assert len(targe.size()) == 3, 'expect targe size is b,h,w'
        b, channel, h, w = pred.size()
        loss = 0.
        for ib in range(b):
            positive = (targe[ib] > 0).float()
            if sparse:
                output = F.adaptive_max_pool2d(targe[ib] * positive, (h, w))
            EPE_map = torch.abs(targe[ib]-pred[ib,0])
            EPE_map = EPE_map[positive.long()]
            loss += EPE_map.mean()
        return loss


    def _init_modules(self):

        if cfg.MODEL.LOAD_IMAGENET_PRETRAINED_WEIGHTS:
            resnet_utils.load_pretrained_imagenet_weights(self)

        if cfg.TRAIN.FREEZE_CONV_BODY:
            for p in self.Conv_Body.parameters():
                p.requires_grad = False

    def _init_weights_kaiming(self,m):
        if type(m) == nn.Conv2d:
            nn.init.kaiming_uniform_(m.weight)


    def _init_weights_normal(self,m):
        if type(m) == nn.Conv2d:
            nn.init.normal_(m.weight,std=0.1)

    def forward(self, data, **label_info):
        #print("forward start")
        return_dict = {}
        #print (feed_dict['semseg_label_1'][0,0,0])
        if self.training: # training
            return_dict['losses'] = {}
            return_dict['metrics'] = {}
            if cfg.SEM.DECODER_TYPE.endswith('deepsup'): # use deep supervision technique
                (pred, pred_deepsup) = self.decoder(self.encoder(data, return_feature_maps=True))
            else:
                pred = self.decoder(self.encoder(data, return_feature_maps=False))
            """
            pred = nn.functional.interpolate(
                pred, size=cfg.SEM.INPUT_SIZE, 
                mode='bilinear', align_corners=False)
            """

            pred_semseg, pred_disp = torch.split(pred, cfg.TRAIN.IMS_PER_BATCH, dim=0)
            #semseg heads
            pred_semseg = self.conv_last_semseg(pred_semseg)
            pred_semseg = nn.functional.log_softmax(pred_semseg, dim=1)
            loss_semseg = self.crit(pred_semseg, label_info['%s_0'%cfg.SEM.OUTPUT_PREFIX])

            #disp heads
            pred_disp = self.conv_last_disp(pred_disp)
            loss_disp = self.disp_loss(pred_disp, 
                    label_info['%s_0'%cfg.DISP.OUTPUT_PREFIX])
            
            if loss_disp <= 1.0:
                cv2.imwrite('pred_disp.png', pred_disp[0,0].numpy())
            #print("check")
            if cfg.SEM.DECODER_TYPE.endswith('deepsup'):
                #split two tasks features
                pred_deepsup_semseg, pred_deepsup_disp = torch.split(pred_deepsup, cfg.TRAIN.IMS_PER_BATCH, dim=0)
                #sub loss of semseg
                pred_deepsup_semseg = self.semseg_deepsup(pred_deepsup_semseg)
                pred_deepsup_semseg = nn.functional.log_softmax(pred_deepsup_semseg, dim=1)
                loss_deepsup_semseg = self.crit(pred_deepsup_semseg,
                            label_info['{}_{}'.format(cfg.SEM.OUTPUT_PREFIX, 1)])
                loss_semseg = loss_semseg + loss_deepsup_semseg * self.deep_sup_scale[1]
                #sub loss of disp   
                pred_deepsup_disp = self.disp_deepsup(pred_deepsup_disp)
                loss_deepsup_disp = self.disp_loss(pred_deepsup_disp,
                            label_info['{}_{}'.format(cfg.DISP.OUTPUT_PREFIX, 1)])
                loss_disp = loss_disp + loss_deepsup_disp * self.deep_sup_scale[1]
            #unsqueeze(1)
            #print("check")
            acc = self.pixel_acc(pred_semseg, label_info['%s_0'%cfg.SEM.OUTPUT_PREFIX])
            return_dict['losses']['loss_semseg'] = loss_semseg
            return_dict['losses']['loss_disp'] = loss_disp
            return_dict['metrics']['accuracy_pixel'] = acc
            #return_dict['metrics']['epe_pixel'] =  loss_disp
            # pytorch0.4 bug on gathering scalar(0-dim) tensors
            #print("check")
            for k, v in return_dict['losses'].items():
                return_dict['losses'][k] = v.unsqueeze(0)
            for k, v in return_dict['metrics'].items():
                return_dict['metrics'][k] = v.unsqueeze(0)
            #print("check")
        else: # inference
            pred = self.decoder(self.encoder(data, return_feature_maps=True), segSize=segSize)
            pred_semseg, pred_disp = torch.split(pred, 1, dim=0)
            return_dict['pred_semseg'] = pred_semseg
            return_dict['pred_disp'] = pred_disp

       # handle = pynvml.nvmlDeviceGetHandleByIndex(0)
       # meminfo = pynvml.nvmlDeviceGetMemoryInfo(handle)

       # print("GPU MEMORIES UESD:{} MB".format(meminfo.used/1024**2))
       # print("GPU MEMORIES FREE:{} MB".format(meminfo.free/1024**2))

       # for key in return_dict.keys():
       #     print(key)


        return return_dict


    @check_inference
    def convbody_net(self, data):
        """For inference. Run Conv Body only"""
        blob_conv = self.Conv_Body(data)
        return blob_conv


    def _add_loss(self, return_dict, key, value):
        """Add loss tensor to returned dictionary"""
        return_dict['losses'][key] = value
